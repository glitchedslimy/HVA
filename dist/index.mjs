function _array_like_to_array(r,t){(null==t||t>r.length)&&(t=r.length);for(var a=0,e=new Array(t);a<t;a++)e[a]=r[a];return e}function _array_with_holes(r){if(Array.isArray(r))return r}function _array_without_holes(r){if(Array.isArray(r))return _array_like_to_array(r)}function _iterable_to_array(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _iterable_to_array_limit(r,t){var a=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=a){var e,n,o=[],_=!0,i=!1;try{for(a=a.call(r);!(_=(e=a.next()).done)&&(o.push(e.value),!t||o.length!==t);_=!0);}catch(r){i=!0,n=r}finally{try{_||null==a.return||a.return()}finally{if(i)throw n}}return o}}function _non_iterable_rest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _non_iterable_spread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _sliced_to_array(r,t){return _array_with_holes(r)||_iterable_to_array_limit(r,t)||_unsupported_iterable_to_array(r,t)||_non_iterable_rest()}function _to_consumable_array(r){return _array_without_holes(r)||_iterable_to_array(r)||_unsupported_iterable_to_array(r)||_non_iterable_spread()}function _unsupported_iterable_to_array(r,t){if(r){if("string"==typeof r)return _array_like_to_array(r,t);var a=Object.prototype.toString.call(r).slice(8,-1);return"Object"===a&&r.constructor&&(a=r.constructor.name),"Map"===a||"Set"===a?Array.from(a):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_array_like_to_array(r,t):void 0}}export default function hva(r,t){return function(a){var e;t||(t=[]);var n=_to_consumable_array(t).concat(_to_consumable_array(Object.entries(a).flatMap((function(t){var a,n=_sliced_to_array(t,2),o=n[0],_=n[1];return null!==(e=null===(a=r.variants[o])||void 0===a?void 0:a[_])&&void 0!==e?e:[]}))));return a.class&&n.push(a.class),a.className&&n.push(a.className),n.join(" ")}}